#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

// Replace with your network credentials
const char* ssid = ""; // enter the credentials here(wifi name)
const char* password = "";// enter the credentials here(wifi pass)

// UDP settings
IPAddress udpServerIP(110, 49, 17, 90);  // Replace with the IP address of your UDP server
const int udpServerPort = 5005;

WiFiUDP udp;

int loc, prev_loc, dest, next_dir, i, j, direction1, direction2;

void setup() {
  pinMode(D0, OUTPUT);
  pinMode(D2, OUTPUT);
  pinMode(D13, OUTPUT);

  Serial.begin(9600);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize UDP
  udp.begin(1234);  // UDP local port

  // Print ESP8266 local IP address
  Serial.println(WiFi.localIP());
}

void loop() {
  prev_loc = loc;
  loc = get_loc3();

  //choosing left or right from the direction
  if (dest == 1 || dest == 2) {
    direction1 = 2;
    direction2 = 3;

  } else if (dest == 3 || dest == 4) {
    direction1 = 3;
    direction2 = 2;
  }

  //GENERAKIZED MATRIX FOR 123456 MAP
  int path[6][6] = { { 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1 }, { 3, 1, 1, 2, 1, direction1 }, { 1, 2, 3, 1, direction2, 1 } };

  sendUDPWithLoc();
  delay(100);
  sendUDPForLoc();
  receiveUDPResponse1();
  delay(100);

  // updating the destinantion's row to be zero
  for (i = dest - 1; i == dest - 1; i = 0) {
    for (j = 0; j <= 5; j++) {
      path[i][j] = 0;
      Serial.println("0 are updated");
    }
  }

  i = loc - 1;
  j = prev_loc - 1;

  if (path[i][j] == 0) {
    digitalWrite(D0, 1);
    digitalWrite(D2, 0);
    digitalWrite(D3, 0);
    Serial.println(path[i][j]);
  } else if (path[i][j] == 2) {
    digitalWrite(D0, 0);
    digitalWrite(D2, 1);
    digitalWrite(D3, 0);
    Serial.println(path[i][j]);
  } else if (path[i][j] == 3) {
    digitalWrite(D0, 0);
    digitalWrite(D2, 0);
    digitalWrite(D3, 1);
  } else if (path[i][j] == 1) {
    digitalWrite(D0, 0);
    digitalWrite(D2, 0);
    digitalWrite(D3, 0);
  }
  delay(500);

  /*sendUDPForDir();
    receiveUDPResponse2();
    delay(50);*/

}


void sendUDPWithLoc() {
  // Construct the message with the counter
  String message = "SET,car_loc," + String(loc);

  // Send UDP message
  udp.beginPacket(udpServerIP, udpServerPort);
  udp.print(message);
  udp.endPacket();

  Serial.println("UDP message sent: " + message);
}

//sending UDP for NEXT NODE
void sendUDPForLoc() {
  // Construct the message with the counter
  String message = "GET,car_dest";

  // Send UDP message
  udp.beginPacket(udpServerIP, udpServerPort);
  udp.print(message);
  udp.endPacket();

  Serial.println("UDP message sent: " + message);
}
//receive the UDP response
int receiveUDPResponse1() {
  // Wait for a response
  int packetSize = udp.parsePacket();
  if (packetSize) {
    // Allocate buffer to hold the response
    char buffer[255];

    // Read the response into the buffer
    int bytesRead = udp.read(buffer, sizeof(buffer));

    // Null-terminate the buffer to treat it as a string
    buffer[bytesRead] = '\0';

    // Print the received data
    Serial.print("UDP response received: ");
    Serial.println(buffer);
    dest = atoi(buffer);
  }
}


//sending UDP for NEXT DIRECTION
void sendUDPForDir() {
  // Construct the message with the counter
  String message = "GET,next_dir";

  // Send UDP message
  udp.beginPacket(udpServerIP, udpServerPort);
  udp.print(message);
  udp.endPacket();

  Serial.println("UDP message sent: " + message);
}
//receive the UDP response for direction
int receiveUDPResponse2() {
  // Wait for a response
  int packetSize = udp.parsePacket();
  if (packetSize) {
    // Allocate buffer to hold the response
    char buffer[255];

    // Read the response into the buffer
    int bytesRead = udp.read(buffer, sizeof(buffer));

    // Null-terminate the buffer to treat it as a string
    buffer[bytesRead] = '\0';

    // Print the received data
    Serial.print("UDP response received: ");
    Serial.println(buffer);
    next_dir = atoi(buffer);
  }
}

int get_loc3() {
  int loc1, loc2, loc3;
  loc1 = get_loc();
  loc2 = get_loc();
  loc3 = get_loc();
  if ((loc1 == loc2) && (loc1 == loc3))
    return loc1;
  else
    return -1;
}

int get_loc() {
  int t1, t2, i, j, sum, maxval, maxpos, mp, slot1, slot2, slot3, slot4, loc;
  int sig[240];
  int b[8];

  for (i = 0; i < 240; i++) {  //two frames buffered
    t1 = micros();
    sig[i] = analogRead(A0);
    t2 = micros();
    if (130 - (t2 - t1) > 0)
      delayMicroseconds(130 - (t2 - t1));
    //delayMicroseconds(130);
  }

  sum = 0;
  for (j = 0; j < 20; j++)
    sum = sum + sig[j];
  maxval = sum;
  maxpos = 19;
  for (i = 20; i < (19 + 120); i++) {
    sum = sum - sig[i - 20] + sig[i];
    if (sum > maxval) {
      maxval = sum;
      maxpos = i;
    }
  }

  mp = maxpos;
  for (i = 0; i < 4; i++) {
    slot1 = sig[mp + 20 + 20 * i] + sig[mp + 21 + 20 * i] + sig[mp + 22 + 20 * i] + sig[mp + 23 + 20 * i] + sig[mp + 24 + 20 * i];
    slot2 = sig[mp + 25 + 20 * i] + sig[mp + 26 + 20 * i] + sig[mp + 27 + 20 * i] + sig[mp + 28 + 20 * i] + sig[mp + 29 + 20 * i];
    slot3 = sig[mp + 30 + 20 * i] + sig[mp + 31 + 20 * i] + sig[mp + 32 + 20 * i] + sig[mp + 33 + 20 * i] + sig[mp + 34 + 20 * i];
    slot4 = sig[mp + 35 + 20 * i] + sig[mp + 36 + 20 * i] + sig[mp + 37 + 20 * i] + sig[mp + 38 + 20 * i] + sig[mp + 39 + 20 * i];
    if (slot1 > slot2 && slot1 > slot3 && slot1 > slot4) {
      b[2 * i] = 0;
      b[2 * i + 1] = 0;
    } else if (slot2 > slot1 && slot2 > slot3 && slot2 > slot4) {
      b[2 * i] = 0;
      b[2 * i + 1] = 1;
    } else if (slot3 > slot1 && slot3 > slot2 && slot3 > slot4) {
      b[2 * i] = 1;
      b[2 * i + 1] = 0;
    } else {
      b[2 * i] = 1;
      b[2 * i + 1] = 1;
    }
  }
  loc = 128 * b[0] + 64 * b[1] + 32 * b[2] + 16 * b[3] + 8 * b[4] + 4 * b[5] + 2 * b[6] + b[7];
  if (loc == 8)
    loc = 3;
  return loc;
}
